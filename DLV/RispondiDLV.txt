#maxint=150.
rangeBriscole(1..5).
gioco(Carta,Seme) | nonGioco(Carta,Seme) :- manoGiocatore(Carta,Seme).

:- not #count{ C,S : gioco(C,S) }  = 1.

presa(C,S, C1,S1, Tot) :- gioco(C,S), banco(C1,S1), batte(C,S,C1,S1),carta(C,S,V),carta(C1,S1,V1), Tot = V+V1.

bilancioPunti(Tot) :- gioco(C,S), banco(C1,S1), batte(C,S,C1,S1), carta(C,S,V),carta(C1,S1,V1), T = V+V1 , Tot = T+22.

bilancioPunti(Tot) :- gioco(C,S), banco(C1,S1), not batte(C,S,C1,S1), carta(C,S,V),carta(C1,S1,V1), T= V+V1, Tot = 22-T .

batte(C,S,C1,S) :- carta(C,S,V), carta(C1,S,V1),C!=C1, V > V1 .
batte(C,S,C1,S) :- carta(C,S,V), carta(C1,S,V1),C!=C1, V = V1, C > C1 .
batte(C,S,C1,S1):- carta(C,S,V), carta(C1,S1,V1), S!=S1, briscola(S) .
batte(C,S,C1,S) :- carta(C,S,V), carta(C1,S,V1),C!=C1, briscola(S) , V > V1 .

tuttiLisciInMano :- #count{ C,S : manoGiocatore(C,S), carta(C,S,V), not briscola(S), V = 0} = 3.

liscioInMano :- manoGiocatore(C,S), carta(C,S,V), not briscola(S), V = 0.

mioPunteggio(Tot) :- #sum{ V : mioMazzo(C,S), carta(C,S,V)} = Tot.

possoVincere :- mioPunteggio(X), presa(C,S, C1,S1, T), Tot = X + T, Tot > 60 .

almenoTreCarichi :- #count{C,S: carta(C,S,V),manoGiocatore(C,S),V>9}>2.

prendo :- presa(C,S,_,_,_), gioco(C,S).
nonPrendo :- not prendo.

puntiSulBanco :- banco(C,S), carta(C,S,V), not briscola(S), V>0 , V < 9.
caricoSulBanco :- banco(C,S), carta(C,S,V) , not briscola(S), V>9.
liscioSulBanco :- banco(C,S), carta(C,S,V), not briscola(S), V = 0.
briscolaLiscioSulBanco :- banco(C,S), carta(C,S,V), briscola(S), V = 0.
puntiBriscolaSulBanco :- banco(C,S), briscola(S),  carta(C,S,V), V > 0, V<5.
almeno2briscoleDivalore :- #count{ C,S : manoGiocatore(C,S),briscola(S), valoreBriscola(C,X)}>1.

briscoleInMano(T) :- #count{ C,S : manoGiocatore(C,S),briscola(S)} = T.

avversarioVince(Tot) :- nonPrendo, gioco(C,S),carta(C,S,V),banco(C1,S1), carta(C1,S1,V1), punteggioAvversario(X), T = V+X,Tot = T+V1,  Tot > 60.

:- not gioco(C,S), presa(C,S,_,_,_), possoVincere.

:- gioco(C,S), briscola(S), not possoVincere, liscioSulBanco, not almenoTreCarichi, briscoleInMano(T), T<1.

% non Ã¨ possibile giocare asso o tre di briscola se ci sono al massimo 4 punti sul banco
% se non posso vincere e se non ho 3 carichi in mano

	:- gioco(C,S),carta(C,S,V), V>9, briscola(S), not almenoTreCarichi, not possoVincere, puntiSulBanco, briscoleInMano(X), not X>1.
	:- gioco(C,S),carta(C,S,V), V>9, briscola(S), not almenoTreCarichi, not possoVincere, liscioSulBanco.
	:- gioco(C,S),carta(C,S,V), V>0, briscola(S), not almenoTreCarichi, not possoVincere, briscolaLiscioSulBanco.
	:- gioco(C,S),carta(C,S,V), V>9, briscola(S), not almenoTreCarichi, not possoVincere, puntiBriscolaSulBanco, briscoleInMano(X), not X>1.

:- briscoleInMano(T), briscoleConsecutive, T > 1, gioco(C,S), carta(C,S,V), nonGioco(C1,S), carta(C1,S,V1), V > V1.

:~ prendo, gioco(C,S), carta(C,S,V), V>0, liscioSulBanco, briscola(S). [ 1 : 5]

:~ bilancioPunti(T), X = 44-T . [X : 4]

:~ nonPrendo, gioco(C,S), briscola(S). [ 1 : 3 ] 

:~ prendo. [ 1 : 2 ]
:~ gioco(C,S). [ C : 1]


carta(1,"denari", 11).
carta(2,"denari", 0).
carta(3,"denari", 10).
carta(4,"denari", 0).
carta(5,"denari", 0).
carta(6,"denari", 0).
carta(7,"denari", 0).
carta(8,"denari", 2).
carta(9,"denari", 3).
carta(10,"denari", 4).
carta(1,"coppe", 11).
carta(2,"coppe", 0).
carta(3,"coppe", 10).
carta(4,"coppe", 0).
carta(5,"coppe", 0).
carta(6,"coppe", 0).
carta(7,"coppe", 0).
carta(8,"coppe", 2).
carta(9,"coppe", 3).
carta(10,"coppe", 4).
carta(1,"bastoni", 11).
carta(2,"bastoni", 0).
carta(3,"bastoni", 10).
carta(4,"bastoni", 0).
carta(5,"bastoni", 0).
carta(6,"bastoni", 0).
carta(7,"bastoni", 0).
carta(8,"bastoni", 2).
carta(9,"bastoni", 3).
carta(10,"bastoni", 4).
carta(1,"spade", 11).
carta(2,"spade", 0).
carta(3,"spade", 10).
carta(4,"spade", 0).
carta(5,"spade", 0).
carta(6,"spade", 0).
carta(7,"spade", 0).
carta(8,"spade", 2).
carta(9,"spade", 3).
carta(10,"spade", 4).

valoreBriscola(1, 1).
valoreBriscola(3, 2).
valoreBriscola(10, 3).
valoreBriscola(9, 4).
valoreBriscola(8, 5).